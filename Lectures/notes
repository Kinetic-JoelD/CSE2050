def is_sorted(L):
    for i in range(len(L) -1):
        if L[i] > L[i + 1]: return False
    return True

def insertion_sort(L):
    """

    """
    # Find the next biggest item
    # Swap that item to the correct spot
    for i in range(1, len(L)): # Excludes the first item because we know that will be sorted alreayd in the sorted version (1:n -1)
        j = i #inner loop that starts at the index of the outer loop and iterates to the left 
              # checking if we need to do swaps and stops if we don't need to do anymore
        while L[j - 1] > L[j] and j > 0:
            L[j -1], L[j] = L[j], L[j -1] # The swap
            j -= 1


if __name__ == "__main__":
    import random
    L = [random.randint(0,10) for i in range(1000)]
    L.append(-1)


    assert(not is_sorted(L))
    insertion_sort(L)
    assert(is_sorted(L))

